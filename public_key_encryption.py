from binascii import *
from fractions import *
import gmpy2
import math

def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m

gmpy2.get_context().precision = 1000000
N = 179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581
N_root = gmpy2.iroot_rem(N,2)[0] + 1
x = gmpy2.iroot(pow(N_root, 2) - N, 2)[0]
print("q1")
q = gmpy2.gcd(N_root - x, N)
print(q)
p = N // q
phi = (p - 1) * (q - 1)
d = modinv(65537, phi)
c = 22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540
m = gmpy2.powmod(c,d,N)
print(hex(m)[2:])



N = 648455842808071669662824265346772278726343720706976263060439070378797308618081116462714015276061417569195587321840254520655424906719892428844841839353281972988531310511738648965962582821502504990264452100885281673303711142296421027840289307657458645233683357077834689715838646088239640236866252211790085787877
N_root = gmpy2.iroot_rem(N,2)[0] + 1
A = N_root
while not gmpy2.iroot(pow(A,2) - N,2)[1]:
	A += 1
x = gmpy2.iroot(pow(A, 2) - N, 2)[0]
print("q2")
print(gmpy2.gcd(A - x, N))

N = 720062263747350425279564435525583738338084451473999841826653057981916355690188337790423408664187663938485175264994017897083524079135686877441155132015188279331812309091996246361896836573643119174094961348524639707885238799396839230364676670221627018353299443241192173812729276147530748597302192751375739387929
root_24N = gmpy2.iroot_rem(24 * N,2)[0] + 1
x_2 = gmpy2.iroot(pow(root_24N, 2) - 24 * N, 2)[0]
print("q3")
print(gmpy2.gcd(root_24N - x_2, N))

